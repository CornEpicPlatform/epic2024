[
  {
    "id": 0,
    "href": "/epic-awesome-gamer/zh/docs/player/cli/overview/",
    "title": "Overview",
    "section": "脚手架指令",
    "content": "V2RSS 脚手架指令\r#\r\r基础指令\r#\r\rscaffold ping\r#\r\r测试 Redis 数据库连接。\r\rscaffold build\r#\r\r在 Ubuntu 中构建基础运行环境。\r\r\r订阅管理\r#\r\rscaffold pool\r#\r\r订阅池的命令行管理工具。功能包括：剔除 alive_pool 中的失效订阅或过期订阅，输出订阅池状态等。\r\r\r\r系统任务\r#\r\rscaffold deploy\r#\r\r部署定时任务节点。\r\rscaffold synergy\r#\r\r部署协同工作节点。\r\r\rscaffold server\r#\r\r部署 PRODUCTION 接口服务器。\r\rscaffold entropy\r#\r\r采集队列的命令行管理工具。功能包括：更新待办任务、更新采集队列容量，检查待办任务心跳，输出采集队列摘要信息。\r\r\r高级指令\r#\r\rscaffold mining\r#\r\r采集、清洗、分类、存储暴露在公网上的 SSPanel-Uim 站点。\r\rscaffold spawn\r#\r\r释放所有本机采集实例，基于 gevent 并发执行。\r\r\r实验功能\r#\r\rscaffold ash\r#\r\r通过设定的 threshold 审查订阅池，清洗出各类订阅中的优质节点，重新排列组合生成可被 Clash 吸收的规则的 config.yaml ；自动打开 Clash 导入配置文件。\r\r\r\r"
  },
  {
    "id": 1,
    "href": "/epic-awesome-gamer/zh/docs/player/getting-started/overview/",
    "title": "环境复现",
    "section": "开始使用",
    "content": "V2RSS 玩家手册\r#\r\r 更新日期：2022/01/20\n 环境复现\r#\r\r📌 本项目仍处于测试阶段，大部分功能模块暂未完成。\r\r   项目名 参考软件 备注     操作系统 Windows 10 ，Ubuntu20.04 LTS /   开发工具 PyCharm Community Edition Python3.8   远程登录 Finalshell ，Xshell 远程服务器终端连接   开发依赖 google-chrome ， chromedriver 浏览器控制驱动   组件依赖 YOLOv4 目标检测   辅助工具（Win64） Anaconda Navigator 开发环境管理   辅助工具（Linux） pyenv，tmux 版本管理与会话管理    "
  },
  {
    "id": 2,
    "href": "/epic-awesome-gamer/zh/docs/player/cli/ping/",
    "title": "Scaffold Ping",
    "section": "脚手架指令",
    "content": "Scaffold Ping\r#\r\rNAME\r#\r\rmain.py ping - 测试 RedisNode 连接\nSYNOPSIS\r#\r\rmain.py ping - DESCRIPTION\r#\r\r测试数据库连接。这是个不常用的功能，仅会在新环境首次创建时使用，如 在 GitHub Actions 中检查配置是否正确；在本地初次调试时，检查配置文件中 REDIS_NODE 是否配置正确等。\n"
  },
  {
    "id": 3,
    "href": "/epic-awesome-gamer/zh/docs/player/getting-started/quick-start/",
    "title": "快速上手",
    "section": "开始使用",
    "content": "快速上手\r#\r\r快速部署一个可以采集订阅的 V2RSS 后端服务。\n🚧 施工中\u0026hellip;\r\rLinux(Ubuntu)\r  Fork 项目，拉取源码\n  进入工作目录\n  拉取必要依赖\n根据你的情况选择 pip/pip3 ，或使用 pyenv/conda 。\n  pip install -r ./requirements.txt 初始化组织结构以及配置文件  cd src \u0026amp;\u0026amp; python3 main.py  构建基础运行环境\n脚本构建的具体内容可参考 install 脚手架指令\n  python3 main.py intall  修改配置文件\n  测试连接\n若返回 欢迎使用 字样说明配置文件编写以及节点配置都没问题，可以正常运行项目了。\n  python3 main.py ping 试运行 GET 指令  python3 main.py get 部署系统服务  # 部署系统定时任务 # 部署协同工作节点 # 部署 PRODUCTION 接口服务器 Windows\rMacOS\r\r"
  },
  {
    "id": 4,
    "href": "/epic-awesome-gamer/zh/docs/player/getting-started/install-v2rss/",
    "title": "源码下载",
    "section": "开始使用",
    "content": "源码下载\r#\r\r"
  },
  {
    "id": 5,
    "href": "/epic-awesome-gamer/zh/docs/player/getting-started/basic-usage/",
    "title": "基本用法",
    "section": "开始使用",
    "content": "基本用法\r#\r\r"
  },
  {
    "id": 6,
    "href": "/epic-awesome-gamer/zh/docs/player/getting-started/directory-structure/",
    "title": "目录结构",
    "section": "开始使用",
    "content": "目录结构\r#\r\rNew Project Scaffolding\r#\r\r.\r├── examples\r├── src\r│ ├── apis\r│ ├── database\r│ ├── model\r│ ├── services\r│ ├── config.py\r│ ├── config.yaml\r│ ├── config-sample.yaml\r│ └── main.py\r└── requirements.txt\rDiretory Structure Explained\r#\r\rexamples\r#\r\r这里存放一些精简化的后端功能接口，玩家可通过这些运行案例迅速了解服务间的层级关系以及核心业务的实现逻辑。\nsrc/apis\r#\r\r存放全局接口函数，如一些复杂的脚手架接口逻辑会在此编排。\nsrc/database\r#\r\r存放系统运行缓存。在项目初始化后，此文件夹被自动创建。\nsrc/model\r#\r\r存放 YOLOv4 目标检测模型。在项目初始化后，此文件夹被自动创建。\nsrc/services\r#\r\r存放核心业务代码，包括如下内容：\n.\r├── bricklayer\r│ ├── __init__.py\r│ ├── core.py\r│ └── exceptions.py\r├── explorer\r│ ├── __init__.py\r│ ├── core.py\r│ └── exceptions.py\r├── utils\r│ ├── accelerator\r│ ├── armor\r│ ├── toolbox\r│ └── __init__.py\r├── __init__.py\r├── deploy.py\r├── scaffold.py\r└── settings.py\r  bricklayer\n搬瓦工实例对象，包含免费游戏领取的完整执行逻辑。\n  explorer\n探索者实例对象，负责维护商城价值信息。\n  utils\n可移植模组。\n  deploy.py\n系统任务的调度中心。\n  scaffold.py\n脚手架源码。\n  settings.py\n系统设置。设定全局变量用于精确的绝对路径定位，初始化系统日志，引用 src/config.py 中的配置信息。\n  src/config.yaml\r#\r\r项目配置文件。在项目初始化后，从 src/config_sample.yaml 拷贝生成。 src/config.py 的功能是读取配置信息并转义成 Python 全局变量。\n关于配置文件的具体介绍可见「\rCONFIGURATION」。\nsrc/main.py\r#\r\r脚手架入口文件，作为运行根辐射系统指令，在脚手架未编译前，作为系统指令的统一入口。\n"
  },
  {
    "id": 7,
    "href": "/epic-awesome-gamer/zh/docs/player/getting-started/configuration/",
    "title": "项目配置",
    "section": "开始使用",
    "content": "项目配置\r#\r\r"
  },
  {
    "id": 8,
    "href": "/epic-awesome-gamer/zh/docs/player/cli/deploy/",
    "title": "Scaffold Deploy",
    "section": "脚手架指令",
    "content": "Scaffold Deploy\r#\r\rNAME\r#\r\rmain.py deploy - 部署系统定时任务\nSYNOPSIS\r#\r\rmain.py deploy \u0026lt;flags\u0026gt; DESCRIPTION\r#\r\r部署系统定时任务。\nUsage: python main.py deploy ______________________________________________________________________ or: python main.py deploy --collector=False |强制关闭采集器 or: python main.py deploy --collector |强制开启采集器 or: python main.py deploy --collector --decoupler |强制开启采集器和订阅解耦器 ______________________________________________________________________  初次部署前先运行 python main.py entropy --update 初始化远程队列。 命令行参数的优先级高于配置文件。 不使用参数启动时，相关配置以配置文件为准。  定时任务包括如下内容：\n collector： 采集器任务（与 overdue_job 捆绑）。 decoupler： 订阅解耦任务，用于清除失效订阅。  需要注意的是，配置文件中设定了默认的 launch_interval 任务发起间隔，玩家自定义的间隔数不得小于默认值，否则任务无法部署（或强制调回默认值启动）。\nFLAGS\r#\r\r  collector=COLLECTOR\n  Type: Optional[bool]\n  Default: None\n强制开启/关闭采集器\n    decoupler=DECOUPLER\n  Type: Optional[bool]\n  Default: None\n强制开启/关闭订阅解耦器\n    "
  }
]